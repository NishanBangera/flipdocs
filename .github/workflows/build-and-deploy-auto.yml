name: Build and Deploy to EC2 with SSL

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/flipdocs

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [api, web]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/${{ matrix.service }}/Dockerfile
        target: runner
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Test SSH connection
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"
    
    - name: Deploy to EC2 with SSL
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'bash -s' << 'ENDSSH'
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'bash -s' << 'ENDSSH'
          set -e
          cd ${{ secrets.EC2_DEPLOYMENT_PATH }}
          
          # Verify deployment environment
          echo "üîç Verifying deployment environment..."
          echo "Current directory: $(pwd)"
          echo "User: $(whoami)"
          
          # Verify SSL deployment directory exists
          if [ ! -f docker-compose.ssl.yml ]; then
            echo "‚ùå Error: docker-compose.ssl.yml not found in ${{ secrets.EC2_DEPLOYMENT_PATH }}"
            echo "üìù Please run SSL deployment setup first:"
            echo "   curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/deploy-to-ec2.sh | bash"
            exit 1
          fi
          
          # Verify environment file exists
          if [ ! -f .env ]; then
            echo "‚ùå Error: .env file not found"
            echo "üìù Please configure environment variables first"
            exit 1
          fi
          
          # Check if Docker is running
          if ! docker ps > /dev/null 2>&1; then
            echo "‚ùå Error: Docker is not running or accessible"
            exit 1
          fi
          
          # Check if Docker Compose is available
          if ! command -v docker-compose > /dev/null 2>&1; then
            echo "‚ùå Error: docker-compose is not installed"
            exit 1
          fi
          
          # Clean old images
          echo "üßπ Cleaning old images"
          for image in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'ghcr.io/${{ github.repository_owner }}/flipdocs' 2>/dev/null || true); do
            docker rmi $image 2>/dev/null || true
          done
          
          # Pull latest images with retry
          echo "üì• Pulling latest images"
          for i in {1..3}; do
            if docker-compose -f docker-compose.ssl.yml pull; then
              echo "‚úÖ Images pulled successfully"
              break
            else
              echo "‚ö†Ô∏è Pull attempt $i failed, retrying..."
              sleep 5
            fi
          done
          
          # Stop existing containers gracefully
          echo "üõë Stopping existing containers"
          docker-compose -f docker-compose.ssl.yml down --remove-orphans || true
          
          # Start containers with health check
          echo "ÔøΩ Starting containers"
          docker-compose -f docker-compose.ssl.yml up -d
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for services to start..."
          sleep 30
          
          # Health checks for SSL deployment
          echo "üè• Running health checks"
          
          # Check if containers are running
          echo "üìä Container status:"
          docker-compose -f docker-compose.ssl.yml ps
          
          if docker-compose -f docker-compose.ssl.yml ps | grep -q "Up"; then
            echo "‚úÖ Containers are running"
          else
            echo "‚ùå Some containers are not running:"
            docker-compose -f docker-compose.ssl.yml ps
            echo "üìù Container logs:"
            docker-compose -f docker-compose.ssl.yml logs --tail=20
            exit 1
          fi
          
          # Test health endpoints with retries
          echo "üîç Testing health endpoints..."
          
          # Test web health check
          for i in {1..5}; do
            if curl -f -k https://localhost/health > /dev/null 2>&1; then
              echo "‚úÖ HTTPS health check passed"
              break
            elif curl -f http://localhost/health > /dev/null 2>&1; then
              echo "‚ö†Ô∏è HTTP health check passed (SSL might be in setup)"
              break
            else
              echo "‚ö†Ô∏è Health check attempt $i failed, retrying..."
              sleep 10
            fi
          done
          
          # Test API health check
          for i in {1..5}; do
            if curl -f -k https://localhost/api/health > /dev/null 2>&1; then
              echo "‚úÖ API HTTPS health check passed"
              break
            elif curl -f http://localhost/api/health > /dev/null 2>&1; then
              echo "‚ö†Ô∏è API HTTP health check passed (SSL might be in setup)"
              break
            else
              echo "‚ö†Ô∏è API health check attempt $i failed, retrying..."
              sleep 10
            fi
          done
          
          # Check SSL certificate status
          if [ -f certbot/conf/live/flipbook.ironasylum.in/fullchain.pem ]; then
            echo "‚úÖ SSL certificate found"
            echo "üìÖ Certificate expires:"
            openssl x509 -in certbot/conf/live/flipbook.ironasylum.in/fullchain.pem -noout -dates | grep notAfter || true
          else
            echo "‚ö†Ô∏è SSL certificate not found - run SSL setup if needed"
          fi
          
          # Final container status
          echo "üìä Final container status:"
          docker-compose -f docker-compose.ssl.yml ps
          
          # Show service logs for troubleshooting
          echo "üìù Recent logs:"
          docker-compose -f docker-compose.ssl.yml logs --tail=10 --timestamps
          
          echo "üéâ Deployment complete!"
          echo "üåê Application should be accessible at: https://flipbook.ironasylum.in"
          echo "üîç Health endpoints:"
          echo "   - https://flipbook.ironasylum.in/health"
          echo "   - https://flipbook.ironasylum.in/api/health"
        ENDSSH