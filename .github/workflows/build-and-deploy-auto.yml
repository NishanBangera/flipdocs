name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [api, web]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/${{ matrix.service }}/Dockerfile
        target: runner
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -e
          cd /home/ec2-user/flipdocs
          
          # Verify deployment directory exists
          if [ ! -f docker-compose.prod.yml ]; then
            echo "❌ Error: docker-compose.prod.yml not found in /home/ec2-user/flipdocs"
            echo "📝 Please run manual deployment setup first:"
            echo "   https://github.com/${{ github.repository }}/blob/main/DEPLOYMENT-GUIDE.md"
            exit 1
          fi
          
          # Clean old images
          REGISTRY=$(grep '^REGISTRY=' .env | sed 's/REGISTRY=//' || echo 'ghcr.io/${{ github.repository_owner }}')
          echo "🧹 Cleaning old images from $REGISTRY"
          for image in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep $REGISTRY 2>/dev/null || true); do
            docker rmi $image 2>/dev/null || true
          done
          
          # Pull latest images
          echo "📥 Pulling latest images"
          docker-compose -f docker-compose.prod.yml pull
          
          # Restart containers with health check
          echo "🔄 Restarting containers"
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 10
          
          # Health check
          echo "🏥 Running health checks"
          if curl -f http://localhost/api/health > /dev/null 2>&1; then
            echo "✅ API health check passed"
          else
            echo "⚠️ API health check failed, checking logs:"
            docker-compose -f docker-compose.prod.yml logs api --tail=10
          fi
          
          if curl -f http://localhost > /dev/null 2>&1; then
            echo "✅ Web interface check passed"
          else
            echo "⚠️ Web interface check failed, checking logs:"
            docker-compose -f docker-compose.prod.yml logs web --tail=10
          fi
          
          # Show final status
          docker-compose -f docker-compose.prod.yml ps
          
          echo "🎉 Deployment complete!"
          echo "🌐 Application accessible at: http://${{ secrets.EC2_HOST }}"
          echo "🔍 Health endpoint: http://${{ secrets.EC2_HOST }}/api/health"